dexp(.1)
dexp(.5)
7291/9965
6219/8568
17564/22657
12422/16396
(17564 + 12422)/(22657 + 16396)
(24855+18641)/(32622+24964)
28/36
325+265
(220+181)/(590)
19/26
12/19
220/325
181/265
365+180
330/4844
432/4844
432/4358
1084/4844
32622+24964
325+265
590/57586
62/590
4/62
3/4
3096+3639
47+64
6735 + 12409 +15040
111+41+56
11341+13093
160+210
24434 + 45930 + 61142
370 + 125+152
p1 = 0.701195
p2 = 0.772337
n1 = 5000
n2 = 2000
test2p = function(p1, p2, n1, n2){
p = (n1*p1 + n2*p2)/(n1+n2)
se = sqrt(p*(1-p)*(1/n1 + 1/n2))
z = (p1 - p2)/se
p_value = pnorm(z, lower.tail = FALSE)
return(p_value)
}
test2p(p1, p2, n1, n2)
p1 = 0.197258
p2 = 0.248137
n1 = 5000
n2 = 2000
test2p = function(p1, p2, n1, n2){
p = (n1*p1 + n2*p2)/(n1+n2)
se = sqrt(p*(1-p)*(1/n1 + 1/n2))
z = (p1 - p2)/se
p_value = pnorm(z, lower.tail = FALSE)
return(p_value)
}
test2p(p1, p2, n1, n2)
p1 = 0.382805
p2 = 0.460635
n1 = 15844
n2 = 6781
test2p(p1, p2, n1, n2)
p1 = 0.072021
p2 = 0.089079
n1 = 15844
n2 = 6781
test2p(p1, p2, n1, n2)
test2means = function(x1, x2, n1, n2, sd1, sd2){
se = sqrt(sd1^2/n1 + sd2^2/n2)
t = (x1-x2)/se
df = se^2/((sd1^2 / n1)^2 / (n1 - 1) + (sd2^2 / n2)^2 / (n2 - 1))
p_value = pt(q=t, df=df, lower.tail = FALSE)
return(p_value)
}
x1 = 31.6
x2 = 30.2
n1 = 5000
n2 = 2000
sd1 = 8.2
sd2 = 5.0
test2means(x1, x2, n1, n2, sd1, sd2)
x1 = 0.7
x2 = 0.2
n1 = 5000
n2 = 2000
sd1 = 0.185
sd2 = 0.109
test2means(x1, x2, n1, n2, sd1, sd2)
x1 = 0.7
x2 = 0.77
n1 = 5000
n2 = 2000
sd1 = 0.185
sd2 = 0.177
test2means(x1, x2, n1, n2, sd1, sd2)
x1 = 0.2
x2 = 0.25
n1 = 5000
n2 = 2000
sd1 = 0.109
sd2 = 0.124
test2means(x1, x2, n1, n2, sd1, sd2)
x1 = 0.38
x2 = 0.46
n1 = 15844
n2 = 6781
sd1 = 0.191
sd2 = 0.229
test2means(x1, x2, n1, n2, sd1, sd2)
x1 = 0.07
x2 = 0.09
n1 = 15844
n2 = 6781
sd1 = 0.052
sd2 = 0.061
test2means(x1, x2, n1, n2, sd1, sd2)
se = sqrt(sd1^2/n1 + sd2^2/n2)
t = (x1-x2)/se
se
t
df = se^2/((sd1^2 / n1)^2 / (n1 - 1) + (sd2^2 / n2)^2 / (n2 - 1))
df
140*4
560*0.01
5.6*1000
57/560
1/30
140000*0.03333
25814/92115
150/1500
0.28*0.3
0.3*0.3
0.3*0.35
352/3100
0.28*0.35
0.28*0.35
9013/92115
pnorm(1.96)
pnorm(1.65)
pnorm(1.64)
pnorm(1.645)
pnorm(1.643)
pnorm(1.644)
pnorm(1.645)
pnorm(1.28)
pnorm(1.29)
pnorm(1.285)
p1 = 0.198
p2 = 0.467
n1 = 111
n2 = 430
test2p = function(p1, p2, n1, n2){
p = (n1*p1 + n2*p2)/(n1+n2)
se = sqrt(p*(1-p)*(1/n1 + 1/n2))
z = (p1 - p2)/se
p_value = pnorm(z, lower.tail = FALSE)
return(p_value)
}
test2p(p1, p2, n1, n2)
p1 = 0.051
p2 = 0.065
n1 = 995
n2 = 4269
test2p(p1, p2, n1, n2)
install.packages("mapproj")
install.packages("rgeos")
install.packages("rgdal")
install.packages("RColorBrewer")
install.packages("ggmap")
install.packages("maps")
install.packages("proj4")
library(maptools)
library(mapproj)
library(rgeos)
library(rgdal)
log10(10)
log10(5)
5/0.398
5/1
x = seq(0.001, 5.5, length.out = 500)
x
plot(x, log(x, base=5))
plot(x, log(x, base=5), lty='l')
plot(x, log(x, base=5), line_type='l')
plot(x, log(x, base=5), type='l')
plot(x, log(x, base=10), type='l')
log(1)
log(1.1)
log(1.001)
x = seq(1, 2715, by = 1)
length(x)
plot(x, log(x, base=10), type='l')
plot(x, log(x, base=5), type='l')
plot(x, log(x), type='l')
log(5)
log(10)
log(5, base=5)
log(10, base=5)
2.3-1.6
log(10, base=10) - log(5, base=10)
plot(x, log(x, base=15), type='l')
log(10, base=15) - log(5, base=15)
log(5, base=15)
5/log(5, base=10)
5/log(10, base=10)
5*log(10, base=10)
5*log(5, base=10)
5*log(5, base=5)
5/log(5, base=5)
5/log(10, base=5)
3.49 * log(5, base=5)
3.49 / log(5, base=5)
function(base){
new_score1 = 4 / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
return(new_score_diff)
}
find_base = function(base){
new_score1 = 4 / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
return(new_score_diff)
}
plot(x, find_base(x), type='l')
x = seq(2, 50, by=1)
plot(x, find_base(x), type='l')
find_base = function(base){
new_score1 = 5 / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
return(new_score_diff)
}
x = seq(2, 50, by=1)
plot(x, find_base(x), type='l')
x = seq(2, 10, by=1)
plot(x, find_base(x), type='l')
find_base = function(base){
for (i in 1:5){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff == 0){
return(i)
}
}
}
x = seq(2, 10, by=1)
plot(x, find_base(x), type='l')
for (i in 1:5){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
print(new_score_diff)
}
base = 10
for (i in 1:5){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
print(new_score_diff)
}
find_base = function(base){
for (i in 1:5){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff == 0){
return(i)
}
else {
return(NA)
}
}
}
x = seq(2, 10, by=1)
find_base(x)
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff == 0){
return(i)
}
else {
return(NA)
}
}
}
x = seq(2, 10, by=1)
find_base(x)
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff < 0.001){
return(i)
}
else {
return(NA)
}
}
}
find_base(x)
x
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
print(new_score_diff)
}
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff < 0.1){
return(i)
}
else {
return(NA)
}
}
}
find_base(x)
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff < 0.1){
print(i)
}
}
}
find_base(x)
x
find_base(1)
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff < 0.1){
print(i)
print(new_score_diff)
}
}
}
find_base(2)
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (new_score_diff < 0.01){
print(i)
print(new_score_diff)
}
}
}
find_base(x)
find_base(2)
find_base = function(base){
for (i in seq(1, 5, length.out = 500)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (abs(new_score_diff) < 0.001){
print(i)
print(new_score_diff)
}
}
}
find_base(3)
find_base(2)
find_base(3)
find_base(4)
find_base(5)
find_base = function(base){
for (i in seq(1, 5, length.out = 1000)){
new_score1 = i / log(5, base = base)
new_score2 = 5 / log(10, base = base)
new_score_diff = new_score1 - new_score2
if (abs(new_score_diff) < 0.001){
print(i)
print(new_score_diff)
}
}
}
find_base(3)
find_base(5)
find_base(4)
find_base(5)
find_base(6)
find_base(7)
find_base(10)
find_base(11)
find_base(50)
find_base(500)
3.49/log(5, base=10) - 5/log(10, base=10)
3.494494/log(5, base=10) - 5/log(10, base=10)
3.494494/log(5, base=2) - 5/log(10, base=10)
3.494494/log(5, base=2) - 5/log(10, base=2)
5-3.49
3/log(5, base=2) - 5/log(10, base=2)
3.494494/log(10, base=2) - 5/log(15, base=2)
4/log(10, base=2) - 5/log(15, base=2)
4.5/log(10, base=2) - 5/log(15, base=2)
x = seq(1, 5, length.out=500)
plot(x, exp(x))
plot(x, exp(x), type='l')
x = seq(1, 2800, length.out=500)
plot(x, exp(x), type='l')
x = seq(1, 50, length.out=500)
plot(x, exp(x), type='l')
plot(x, exp(0.5*x), type='l')
plot(x, exp(0.2*x), type='l')
plot(x, exp(-0.2*x), type='l')
exp(-0.2*x)
plot(x, exp(-0.3*x), type='l')
plot(x, exp(-0.1*x), type='l')
-0.1*x
exp(-0.1*x)
x = 1:50
plot(x, exp(-0.1*x), type='l')
plot(x, exp(-0.1*x), type='p')
exp(-0.1*x)
1.96 * sqrt(0.48*(1-0.48)/1000)
1.96 * sqrt(0.45*(1-0.48)/1000)
1.96 * sqrt(0.405*(1-0.405)/1000)
1.65 * sqrt(0.405*(1-0.405)/1000)
1.65 * sqrt(0.405*(1-0.405)/1000)
480/1500
1.96 * sqrt(0.405*(1-0.405)/1500)
1.96 * sqrt(0.45*(1-0.45)/1500)
0.405-0.02484257
0.405+0.02484257
0.45 + 0.02517666
0.45 - 0.02517666
1.96 * sqrt(0.48*(1-0.48)/1500)
48-0.02528324
0.48-0.02528324
0.48+0.02528324
install.packages("RcolorBrewer")
load("~/Documents/com_blast_test_result.csv")
library(readr)
com_blast_test_result <- read_csv("~/Documents/com_blast_test_result.csv")
View(com_blast_test_result)
library(ggplot)
library(ggplot2)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar() + facel_grid(_context_app)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar() + facel_grid(X_context_app)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar() + facet_grid(X_context_app)
dim(com_blast_test_result)
names(com_blast_test_result)
names(com_blast_test_result)[1[]
;
names(com_blast_test_result)[1]
names(com_blast_test_result)[1] = 'app'
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar() + facet_grid(app ~.)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar(stat_count='identity') + facet_grid(app ~.)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar(stat='identity') + facet_grid(app ~.)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar(stat='identity', position='dodge') + facet_grid(app ~.)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar(stat='identity', position='dodge') + geom_errorbar(ymin=lower_ci, ymax=upper_ci) + facet_grid(app ~.)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) + geom_bar(stat='identity', position='dodge') + geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci)) + facet_grid(app ~.)
dodge <- position_dodge(width=0.9)
ggplot(aes(x=os, y=ctr, fill=ab_group), data=com_blast_test_result) +
geom_bar(stat='identity', position=dodge) +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), position=dodge) +
facet_grid(app ~.)
library(maptools)
library(mapproj)
library(rgeos)
library(rgdal)
library(RColorBrewer)
library(ggplot2)
us <- readOGR(dsn="cb_2014_us_state_5m", layer="cb_2014_us_state_5m")
setwd("/Users/huxiangyu/Documents/data_science/multiple_apps/us_map_template_in_r/")
us <- readOGR(dsn="cb_2014_us_state_5m", layer="cb_2014_us_state_5m")
us_aea <- spTransform(us, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
alaska <- us_aea[us_aea$STATEFP=="02",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
proj4string(alaska) <- proj4string(us_aea)
hawaii <- us_aea[us_aea$STATEFP=="15",]
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "60", "66", "69", "72", "78"),]
us_aea <- rbind(us_aea, alaska, hawaii)
map <- fortify(us_aea, region="STUSPS")
gg <- ggplot()
gg <- gg + geom_map(data=map, map=map,
aes(x=long, y=lat, map_id=id, group=group),
fill="#ffffff", color="#0e0e0e", size=0.15)
gg
install.packages(ggmap)
install.packages(c("maps", "mapdata"))
install.packages(c("maps", "mapdata"))
install.packages(c("ggplot2", "devtools", "dplyr", "stringr"))
install.packages(c("ggplot2", "devtools", "dplyr", "stringr"))
install.packages(c("ggplot2", "devtools", "dplyr", "stringr"))
install.packages(c("ggplot2", "devtools", "dplyr", "stringr"))
install.packages('sp')
install.packages("sp")
R.version
